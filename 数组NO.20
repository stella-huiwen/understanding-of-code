最好的草
总时间限制: 10000ms 单个测试点时间限制: 1000ms 内存限制: 65536kB
描述
奶牛Bessie计划好好享受柔软的春季新草。新草分布在R行C列的牧场里。它想计算一下牧场中的草丛数量。

在牧场地图中，每个草丛要么是单个“#”，要么是有公共边的相邻两个“#”。给定牧场地图，计算有多少个草丛。

例如，考虑如下5行6列的牧场地图

.#....
..#...
..#..#
...##.
.#....
这个牧场有5个草丛：一个在第一行，一个在第二列横跨了二、三行，一个在第三行，一个在第四行横跨了四、五列，最后一个在第五行。



输入
第一行包含两个整数R和C，中间用单个空格隔开。
接下来R行，每行C个字符，描述牧场地图。字符只有“#”或“.”两种。(1 <= R, C <= 100 )
输出
输出一个整数，表示草丛数。
样例输入
5 6
.#....
..#...
..#..#
...##.
.#....
样例输出
5

思路：
关键一点是避免重复累加，应该将计算过的草丛重新赋值，避免重复



代码：
//最好的草
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int r,c,count=0;
    char a[105][105];
    cin>>r>>c;
    for(int i=0;i<r;i++)//输入数据
        for(int j=0;j<c;j++)
            cin>>a[i][j];
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
            {
                if(a[i][j]=='#')//判断是否存在公共边的相邻的'#',存在则将除当前草以外的草重新赋值，避免重复
                {
                    count++;
                    if(a[i][j+1]=='#')
                        a[i][j+1]='.';
                    if(a[i][j-1]=='#')
                        a[i][j-1]='.';
                    if(a[i-1][j]=='#')
                        a[i-1][j]='.';
                    if(a[i+1][j]=='#')
                        a[i+1][j]='.';
                }
            }
    cout<<count;
    return 0;
}
