字符串移位包含问题
总时间限制: 1000ms 内存限制: 65536kB
描述
对于一个字符串来说，定义一次循环移位操作为：将字符串的第一个字符移动到末尾形成新的字符串。

给定两个字符串s1和s2，要求判定其中一个字符串是否是另一字符串通过若干次循环移位后的新字符串的子串。例如CDAA是由AABCD两次移位后产生的新串BCDAA的子串，而ABCD与ACBD则不能通过多次移位来得到其中一个字符串是新串的子串。

输入
一行，包含两个字符串，中间由单个空格隔开。字符串只包含字母和数字，长度不超过30。
输出
如果一个字符串是另一字符串通过若干次循环移位产生的新串的子串，则输出true，否则输出false。
样例输入
AABCD CDAA
样例输出
true



思路：
首先比较两个字符串长度，将长的字符串放前面，然后用strcpy函数将长的字符串赋值给另一个字符串，
然后用strcat函数将赋值后的字符串拼接到长的字符串的尾部；然后再使用strstr函数，在拼接后的字符串中查找短的字符串；



代码：
#include<bits/stdc++.h>
using namespace std;
int main()
{
    char a[50],b[50],c[50],d[50];
    cin>>a>>b;//输入
    if(strlen(a)<strlen(b))//比较a,b长度，将长的放前面
    {
        strcpy(c,a);
        strcpy(a,b);
        strcpy(b,c);
    }
    strcpy(d,a);//将a赋值给d
    if(strstr(strcat(a,d),b)==NULL)//strcat函数：将后面的字符串添加到前面字符串的尾部
    cout<<"false";//strstr函数：在前面字符串中查找后面字符串的位置，若找到，则返回后面字符串第一个字符在前面字符串中的位置的指针，若没有，则返回NULL
    else
    cout<<"true";
    return 0;
}
