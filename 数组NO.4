描述
求两个大的正整数相减的差。

输入
共2行，第1行是被减数a，第2行是减数b(a > b)。每个大整数不超过200位，不会有多余的前导零。
输出
一行，即所求的差。
样例输入
9999999999999999999999999999999999999
9999999999999
样例输出
9999999999999999999999990000000000000



借位运算原理：
1、将当前位置的数相减。
2、如果结果大于或等于0就直接作为当前位的答案。
3、否则将结果加10作为当前位的答案，在将高位的数-1即可。
模拟：
457-268
首先最高位相减即7-8，小于0，则该项为7-8+10=9，那么答案最低位为9，
同时十位上要减1，即5-1-6=-2，小于0，则该项为-2+10=8，那么十位为8
同时百位再减1，即4-1-2=1，那么百位上位1
最终答案为189




//要考虑被减数小于减数的情况，即输出为负
//高精度整数减法
#include<bits/stdc++.h>
using namespace std;
int compare(string a,string b)//比较字符串的大小
{
    if(a.length()>b.length())//长度比较
        return 0;
    if(a.length()<b.length())
        return 1;
    for(int i=0;i<=a.length();i++)//每一项进行比较
    {
        if(a[i]>b[i])
            return 0;
        if(a[i]<b[i])
            return 1;
    }
    return 0;
}
int main()
{
    string a,b;
    int x[1000],y[1000],z[1000]={0},t;
    memset(x,0,sizeof(x));
    memset(y,0,sizeof(y));
    cin>>a>>b;//输入两个字符串
    x[0]=a.length();//字符长度
    y[0]=b.length();
    if((compare(a,b))==1)//当字符串a小于字符串b时，首先输出负号，再交换a与b的值，减少时间与空间
    {
        printf("-");
        swap(a,b);//交换ab
        t=x[0];//ab长度也要交换
        x[0]=y[0];
        y[0]=t;
    }
    for(int i=1;i<=x[0];i++)//将两个字符串倒序储存在数组中
        x[i]=a[x[0]-i]-'0';
    for(int i=1;i<=y[0];i++)
        y[i]=b[y[0]-i]-'0';
    for(int i=1;i<=x[0];i++)//借位运算
    {
        z[i]+=x[i]-y[i];
        if(z[i]<0)
        {
            z[i]+=10;
            z[i+1]--;
        }
    }
        while((z[x[0]]==0)&&(x[0]>1))//去零
            x[0]--;
        for(int i=x[0];i>=1;i--)//倒序输出结果
            printf("%d",z[i]);
    return 0;
}
