查找最接近的元素
总时间限制: 1000ms 内存限制: 65536kB
描述
在一个非降序列中，查找与给定值最接近的元素。

输入
第一行包含一个整数n，为非降序列长度。1 <= n <= 100000。
第二行包含n个整数，为非降序列各元素。所有元素的大小均在0-1,000,000,000之间。
第三行包含一个整数m，为要询问的给定值个数。1 <= m <= 10000。
接下来m行，每行一个整数，为要询问最接近元素的给定值。所有给定值的大小均在0-1,000,000,000之间。
输出
m行，每行一个整数，为最接近相应给定值的元素值，保持输入顺序。若有多个值满足条件，输出最小的一个。
样例输入
3
2 5 8
2
10
5
样例输出
8
5





代码：
//查找最接近的元素
#include<bits/stdc++.h>
using namespace std;
int m,n,a[100005],k;
int main()
{
    cin>>n;
    a[0]=2147483647;
    for(int i=1;i<=n;i++)//输入
        cin>>a[i];
    cin>>m;
    for(int i=1;i<=m;i++)
    {
        cin>>k;//输入目标数
        int flag=0;
        int l=1,r=n;
        if(a[1]>k)//当目标数小于最小数时，离最小数最近
        {
            cout<<a[1]<<endl;
            continue;
        }
        if(a[n]<k)//当目标数大于最大数时，离最大数最近
        {
            cout<<a[n]<<endl;
            continue;
        }
        while(l<=r)//二分法
        {
            int mid=(l+r)/2;
            if(k==a[mid])//当目标数等于中间值时，直接输出
            {
                cout<<k<<endl;
                flag=1;
                break;
            }
            else
            {
                if(k<a[mid]) //当目标数小于中间值时，将中间数前一项赋值给右端点
                    r=mid-1;
                else
                    l=mid+1;//当目标数大于中间值时，将中间数后一项赋值给左端点
            }
        }
        if(flag==1) 
            continue;
        if(abs(a[r]-k)<=abs(a[l]-k)) //比较右端点和左端点与目标数的距离
            cout<<a[r]<<endl;
        else
            cout<<a[l]<<endl;
    }
    return 0;
}
