矩阵乘法：
资源限制
时间限制：1.0s   内存限制：512.0MB
问题描述
　　给定一个N阶矩阵A，输出A的M次幂（M是非负整数）
　　例如：
　　A =
　　1 2
　　3 4
　　A的2次幂
　　7 10
　　15 22
输入格式
　　第一行是一个正整数N、M（1<=N<=30, 0<=M<=5），表示矩阵A的阶数和要求的幂数
　　接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值
输出格式
　　输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开
样例输入
2 2
1 2
3 4
样例输出
7 10
15 22


原理：采用线性代数里的两个矩阵的乘法计算
即两个矩阵的乘积所得到的矩阵等于左边矩阵第i行的每一个元素分别与右边矩阵第j列的每一个元素一一对应相乘，最后结果再相加。
同时要考虑特殊情况幂为0的情况，即单位矩阵的情况

代码：
//矩阵乘法
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,m;
    cin>>n>>m;
    int a[n+1][n+1],b[n+1][n+1],c[n+1][n+1],sum;
    for(int i=0;i<n;i++)//输入数据
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
            b[i][j]=a[i][j];
        }
    if(m==0)//考虑单位矩阵的情况
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==j)
                    cout<<"1"<<" ";
                else cout<<"0"<<" ";
            }
        cout<<endl;
        }
    }
    else
    {
        m--;//m次幂，则应循环m-1次
        while(m--)
        {
            for(int i=0;i<n;i++)
                for(int j=0;j<n;j++)
                {
                    sum=0;//每一轮，sum再完成赋值后，都要清零
                    for(int k=0;k<n;k++)
                    sum+=b[i][k]*a[k][j];//b矩阵是最初的矩阵，a矩阵是两个矩阵相乘后的矩阵，c矩阵是得到的结果
                    c[i][j]=sum;
                }
            for(int i=0;i<n;i++)
                for(int j=0;j<n;j++)
                    a[i][j]=c[i][j];//每一轮，把c矩阵赋值给a，进入下一轮
        }
        for(int i=0;i<n;i++)//输出结果
        {
            for(int j=0;j<n;j++)
            {
                printf("%d",c[i][j]);
                if(j<n)
                printf(" ");
            }
            cout<<endl;
        }
    }
    return 0;
}
